// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	PubMsg
	PubRet
	BPushMsg
	BPushMsgs
	SPushMsg
	SPushMsgs
	PChatMsg
	PChatMsgs
	GChatMsg
	GChatMsgs
	LoginMsg
	LoginRet
	LogoutMsg
	LogoutRet
	SubMsg
	SubRet
	UnSubMsg
	UnSubRet
	BPushRet
	SPushRet
	PChatRet
	GChatRet
	NickMsg
	NickRet
	ApnsMsg
	ApnsRet
	LabelMsg
	LabelRet
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type PubMsg struct {
	An  []byte `protobuf:"bytes,1,opt,name=an,proto3" json:"an,omitempty"`
	Un  []byte `protobuf:"bytes,2,opt,name=un,proto3" json:"un,omitempty"`
	Cid int64  `protobuf:"varint,3,opt,name=cid" json:"cid,omitempty"`
	Msg []byte `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *PubMsg) Reset()                    { *m = PubMsg{} }
func (m *PubMsg) String() string            { return proto1.CompactTextString(m) }
func (*PubMsg) ProtoMessage()               {}
func (*PubMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

//
type PubRet struct {
	R bool   `protobuf:"varint,1,opt,name=r" json:"r,omitempty"`
	M []byte `protobuf:"bytes,2,opt,name=m,proto3" json:"m,omitempty"`
}

func (m *PubRet) Reset()                    { *m = PubRet{} }
func (m *PubRet) String() string            { return proto1.CompactTextString(m) }
func (*PubRet) ProtoMessage()               {}
func (*PubRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 广播
type BPushMsg struct {
	Ts  []byte `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Rt  int64  `protobuf:"varint,2,opt,name=rt" json:"rt,omitempty"`
	Ttl int64  `protobuf:"varint,3,opt,name=ttl" json:"ttl,omitempty"`
	Mid []byte `protobuf:"bytes,4,opt,name=mid,proto3" json:"mid,omitempty"`
	Lb  []byte `protobuf:"bytes,8,opt,name=lb,proto3" json:"lb,omitempty"`
	Ij  []byte `protobuf:"bytes,9,opt,name=ij,proto3" json:"ij,omitempty"`
	Msg []byte `protobuf:"bytes,7,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *BPushMsg) Reset()                    { *m = BPushMsg{} }
func (m *BPushMsg) String() string            { return proto1.CompactTextString(m) }
func (*BPushMsg) ProtoMessage()               {}
func (*BPushMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// 广播打包结构
type BPushMsgs struct {
	Msgs []*BPushMsg `protobuf:"bytes,1,rep,name=msgs" json:"msgs,omitempty"`
}

func (m *BPushMsgs) Reset()                    { *m = BPushMsgs{} }
func (m *BPushMsgs) String() string            { return proto1.CompactTextString(m) }
func (*BPushMsgs) ProtoMessage()               {}
func (*BPushMsgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BPushMsgs) GetMsgs() []*BPushMsg {
	if m != nil {
		return m.Msgs
	}
	return nil
}

// 单播
type SPushMsg struct {
	Tts [][]byte `protobuf:"bytes,1,rep,name=tts,proto3" json:"tts,omitempty"`
	Tus [][]byte `protobuf:"bytes,2,rep,name=tus,proto3" json:"tus,omitempty"`
	Ft  []byte   `protobuf:"bytes,3,opt,name=ft,proto3" json:"ft,omitempty"`
	Fu  []byte   `protobuf:"bytes,4,opt,name=fu,proto3" json:"fu,omitempty"`
	Rt  int64    `protobuf:"varint,5,opt,name=rt" json:"rt,omitempty"`
	Ttl int64    `protobuf:"varint,6,opt,name=ttl" json:"ttl,omitempty"`
	Mid []byte   `protobuf:"bytes,7,opt,name=mid,proto3" json:"mid,omitempty"`
	Lb  []byte   `protobuf:"bytes,8,opt,name=lb,proto3" json:"lb,omitempty"`
	Ij  []byte   `protobuf:"bytes,9,opt,name=ij,proto3" json:"ij,omitempty"`
	Msg []byte   `protobuf:"bytes,10,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *SPushMsg) Reset()                    { *m = SPushMsg{} }
func (m *SPushMsg) String() string            { return proto1.CompactTextString(m) }
func (*SPushMsg) ProtoMessage()               {}
func (*SPushMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// 单播打包结构
type SPushMsgs struct {
	Msgs []*SPushMsg `protobuf:"bytes,1,rep,name=msgs" json:"msgs,omitempty"`
}

func (m *SPushMsgs) Reset()                    { *m = SPushMsgs{} }
func (m *SPushMsgs) String() string            { return proto1.CompactTextString(m) }
func (*SPushMsgs) ProtoMessage()               {}
func (*SPushMsgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SPushMsgs) GetMsgs() []*SPushMsg {
	if m != nil {
		return m.Msgs
	}
	return nil
}

// 私聊
type PChatMsg struct {
	Tt  []byte `protobuf:"bytes,1,opt,name=tt,proto3" json:"tt,omitempty"`
	Tu  []byte `protobuf:"bytes,2,opt,name=tu,proto3" json:"tu,omitempty"`
	Ft  []byte `protobuf:"bytes,3,opt,name=ft,proto3" json:"ft,omitempty"`
	Fu  []byte `protobuf:"bytes,4,opt,name=fu,proto3" json:"fu,omitempty"`
	Rt  int64  `protobuf:"varint,5,opt,name=rt" json:"rt,omitempty"`
	Ttl int64  `protobuf:"varint,6,opt,name=ttl" json:"ttl,omitempty"`
	Mid []byte `protobuf:"bytes,7,opt,name=mid,proto3" json:"mid,omitempty"`
	Lb  []byte `protobuf:"bytes,8,opt,name=lb,proto3" json:"lb,omitempty"`
	Ij  []byte `protobuf:"bytes,9,opt,name=ij,proto3" json:"ij,omitempty"`
	Msg []byte `protobuf:"bytes,10,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *PChatMsg) Reset()                    { *m = PChatMsg{} }
func (m *PChatMsg) String() string            { return proto1.CompactTextString(m) }
func (*PChatMsg) ProtoMessage()               {}
func (*PChatMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// 私聊打包结构
type PChatMsgs struct {
	Msgs []*PChatMsg `protobuf:"bytes,1,rep,name=msgs" json:"msgs,omitempty"`
}

func (m *PChatMsgs) Reset()                    { *m = PChatMsgs{} }
func (m *PChatMsgs) String() string            { return proto1.CompactTextString(m) }
func (*PChatMsgs) ProtoMessage()               {}
func (*PChatMsgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PChatMsgs) GetMsgs() []*PChatMsg {
	if m != nil {
		return m.Msgs
	}
	return nil
}

// 群聊
type GChatMsg struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *GChatMsg) Reset()                    { *m = GChatMsg{} }
func (m *GChatMsg) String() string            { return proto1.CompactTextString(m) }
func (*GChatMsg) ProtoMessage()               {}
func (*GChatMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// 群聊打包结构
type GChatMsgs struct {
	Msgs []*GChatMsg `protobuf:"bytes,1,rep,name=msgs" json:"msgs,omitempty"`
}

func (m *GChatMsgs) Reset()                    { *m = GChatMsgs{} }
func (m *GChatMsgs) String() string            { return proto1.CompactTextString(m) }
func (*GChatMsgs) ProtoMessage()               {}
func (*GChatMsgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GChatMsgs) GetMsgs() []*GChatMsg {
	if m != nil {
		return m.Msgs
	}
	return nil
}

// 登陆消息
type LoginMsg struct {
	An  []byte `protobuf:"bytes,1,opt,name=an,proto3" json:"an,omitempty"`
	Un  []byte `protobuf:"bytes,2,opt,name=un,proto3" json:"un,omitempty"`
	Cid int64  `protobuf:"varint,3,opt,name=cid" json:"cid,omitempty"`
	Gip []byte `protobuf:"bytes,4,opt,name=gip,proto3" json:"gip,omitempty"`
}

func (m *LoginMsg) Reset()                    { *m = LoginMsg{} }
func (m *LoginMsg) String() string            { return proto1.CompactTextString(m) }
func (*LoginMsg) ProtoMessage()               {}
func (*LoginMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

// 登陆消息返回消息
type LoginRet struct {
	R bool   `protobuf:"varint,1,opt,name=r" json:"r,omitempty"`
	M []byte `protobuf:"bytes,2,opt,name=m,proto3" json:"m,omitempty"`
}

func (m *LoginRet) Reset()                    { *m = LoginRet{} }
func (m *LoginRet) String() string            { return proto1.CompactTextString(m) }
func (*LoginRet) ProtoMessage()               {}
func (*LoginRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

// 登出消息
type LogoutMsg struct {
	An  []byte `protobuf:"bytes,1,opt,name=an,proto3" json:"an,omitempty"`
	Un  []byte `protobuf:"bytes,2,opt,name=un,proto3" json:"un,omitempty"`
	Cid int64  `protobuf:"varint,3,opt,name=cid" json:"cid,omitempty"`
}

func (m *LogoutMsg) Reset()                    { *m = LogoutMsg{} }
func (m *LogoutMsg) String() string            { return proto1.CompactTextString(m) }
func (*LogoutMsg) ProtoMessage()               {}
func (*LogoutMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

// 登出消息返回消息
type LogoutRet struct {
	R bool   `protobuf:"varint,1,opt,name=r" json:"r,omitempty"`
	M []byte `protobuf:"bytes,2,opt,name=m,proto3" json:"m,omitempty"`
}

func (m *LogoutRet) Reset()                    { *m = LogoutRet{} }
func (m *LogoutRet) String() string            { return proto1.CompactTextString(m) }
func (*LogoutRet) ProtoMessage()               {}
func (*LogoutRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// 订阅主题消息
type SubMsg struct {
	An  []byte   `protobuf:"bytes,1,opt,name=an,proto3" json:"an,omitempty"`
	Un  []byte   `protobuf:"bytes,2,opt,name=un,proto3" json:"un,omitempty"`
	Cid int64    `protobuf:"varint,3,opt,name=cid" json:"cid,omitempty"`
	Ts  [][]byte `protobuf:"bytes,4,rep,name=ts,proto3" json:"ts,omitempty"`
}

func (m *SubMsg) Reset()                    { *m = SubMsg{} }
func (m *SubMsg) String() string            { return proto1.CompactTextString(m) }
func (*SubMsg) ProtoMessage()               {}
func (*SubMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

// 订阅主题消息返回消息
type SubRet struct {
	R bool   `protobuf:"varint,1,opt,name=r" json:"r,omitempty"`
	M []byte `protobuf:"bytes,2,opt,name=m,proto3" json:"m,omitempty"`
}

func (m *SubRet) Reset()                    { *m = SubRet{} }
func (m *SubRet) String() string            { return proto1.CompactTextString(m) }
func (*SubRet) ProtoMessage()               {}
func (*SubRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

// 取消订阅主题消息
type UnSubMsg struct {
	An  []byte   `protobuf:"bytes,1,opt,name=an,proto3" json:"an,omitempty"`
	Un  []byte   `protobuf:"bytes,2,opt,name=un,proto3" json:"un,omitempty"`
	Cid int64    `protobuf:"varint,3,opt,name=cid" json:"cid,omitempty"`
	Ts  [][]byte `protobuf:"bytes,4,rep,name=ts,proto3" json:"ts,omitempty"`
}

func (m *UnSubMsg) Reset()                    { *m = UnSubMsg{} }
func (m *UnSubMsg) String() string            { return proto1.CompactTextString(m) }
func (*UnSubMsg) ProtoMessage()               {}
func (*UnSubMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

// 取消订阅主题消息返回消息
type UnSubRet struct {
	R bool   `protobuf:"varint,1,opt,name=r" json:"r,omitempty"`
	M []byte `protobuf:"bytes,2,opt,name=m,proto3" json:"m,omitempty"`
}

func (m *UnSubRet) Reset()                    { *m = UnSubRet{} }
func (m *UnSubRet) String() string            { return proto1.CompactTextString(m) }
func (*UnSubRet) ProtoMessage()               {}
func (*UnSubRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

// 广播返回消息
type BPushRet struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *BPushRet) Reset()                    { *m = BPushRet{} }
func (m *BPushRet) String() string            { return proto1.CompactTextString(m) }
func (*BPushRet) ProtoMessage()               {}
func (*BPushRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

// 单播返回消息
type SPushRet struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *SPushRet) Reset()                    { *m = SPushRet{} }
func (m *SPushRet) String() string            { return proto1.CompactTextString(m) }
func (*SPushRet) ProtoMessage()               {}
func (*SPushRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

// 私聊返回消息
type PChatRet struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *PChatRet) Reset()                    { *m = PChatRet{} }
func (m *PChatRet) String() string            { return proto1.CompactTextString(m) }
func (*PChatRet) ProtoMessage()               {}
func (*PChatRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

// 群播返回消息
type GChatRet struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *GChatRet) Reset()                    { *m = GChatRet{} }
func (m *GChatRet) String() string            { return proto1.CompactTextString(m) }
func (*GChatRet) ProtoMessage()               {}
func (*GChatRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

// 设置Nick
type NickMsg struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *NickMsg) Reset()                    { *m = NickMsg{} }
func (m *NickMsg) String() string            { return proto1.CompactTextString(m) }
func (*NickMsg) ProtoMessage()               {}
func (*NickMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

// 设置Nick返回消息
type NickRet struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *NickRet) Reset()                    { *m = NickRet{} }
func (m *NickRet) String() string            { return proto1.CompactTextString(m) }
func (*NickRet) ProtoMessage()               {}
func (*NickRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

// 设置Apns
type ApnsMsg struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *ApnsMsg) Reset()                    { *m = ApnsMsg{} }
func (m *ApnsMsg) String() string            { return proto1.CompactTextString(m) }
func (*ApnsMsg) ProtoMessage()               {}
func (*ApnsMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

// 设置Apns返回消息
type ApnsRet struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *ApnsRet) Reset()                    { *m = ApnsRet{} }
func (m *ApnsRet) String() string            { return proto1.CompactTextString(m) }
func (*ApnsRet) ProtoMessage()               {}
func (*ApnsRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

// Label
type LabelMsg struct {
	Msg [][]byte `protobuf:"bytes,1,rep,name=msg,proto3" json:"msg,omitempty"`
}

func (m *LabelMsg) Reset()                    { *m = LabelMsg{} }
func (m *LabelMsg) String() string            { return proto1.CompactTextString(m) }
func (*LabelMsg) ProtoMessage()               {}
func (*LabelMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

// 设置Label返回消息
type LabelRet struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *LabelRet) Reset()                    { *m = LabelRet{} }
func (m *LabelRet) String() string            { return proto1.CompactTextString(m) }
func (*LabelRet) ProtoMessage()               {}
func (*LabelRet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func init() {
	proto1.RegisterType((*PubMsg)(nil), "proto.PubMsg")
	proto1.RegisterType((*PubRet)(nil), "proto.PubRet")
	proto1.RegisterType((*BPushMsg)(nil), "proto.BPushMsg")
	proto1.RegisterType((*BPushMsgs)(nil), "proto.BPushMsgs")
	proto1.RegisterType((*SPushMsg)(nil), "proto.SPushMsg")
	proto1.RegisterType((*SPushMsgs)(nil), "proto.SPushMsgs")
	proto1.RegisterType((*PChatMsg)(nil), "proto.PChatMsg")
	proto1.RegisterType((*PChatMsgs)(nil), "proto.PChatMsgs")
	proto1.RegisterType((*GChatMsg)(nil), "proto.GChatMsg")
	proto1.RegisterType((*GChatMsgs)(nil), "proto.GChatMsgs")
	proto1.RegisterType((*LoginMsg)(nil), "proto.LoginMsg")
	proto1.RegisterType((*LoginRet)(nil), "proto.LoginRet")
	proto1.RegisterType((*LogoutMsg)(nil), "proto.LogoutMsg")
	proto1.RegisterType((*LogoutRet)(nil), "proto.LogoutRet")
	proto1.RegisterType((*SubMsg)(nil), "proto.SubMsg")
	proto1.RegisterType((*SubRet)(nil), "proto.SubRet")
	proto1.RegisterType((*UnSubMsg)(nil), "proto.UnSubMsg")
	proto1.RegisterType((*UnSubRet)(nil), "proto.UnSubRet")
	proto1.RegisterType((*BPushRet)(nil), "proto.BPushRet")
	proto1.RegisterType((*SPushRet)(nil), "proto.SPushRet")
	proto1.RegisterType((*PChatRet)(nil), "proto.PChatRet")
	proto1.RegisterType((*GChatRet)(nil), "proto.GChatRet")
	proto1.RegisterType((*NickMsg)(nil), "proto.NickMsg")
	proto1.RegisterType((*NickRet)(nil), "proto.NickRet")
	proto1.RegisterType((*ApnsMsg)(nil), "proto.ApnsMsg")
	proto1.RegisterType((*ApnsRet)(nil), "proto.ApnsRet")
	proto1.RegisterType((*LabelMsg)(nil), "proto.LabelMsg")
	proto1.RegisterType((*LabelRet)(nil), "proto.LabelRet")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Rpc service

type RpcClient interface {
	// 用户登陆相关接口
	Login(ctx context.Context, in *LoginMsg, opts ...grpc.CallOption) (*LoginRet, error)
	Logout(ctx context.Context, in *LogoutMsg, opts ...grpc.CallOption) (*LogoutRet, error)
	// 用户订阅相关
	Subscribe(ctx context.Context, in *SubMsg, opts ...grpc.CallOption) (*SubRet, error)
	UnSubscribe(ctx context.Context, in *UnSubMsg, opts ...grpc.CallOption) (*UnSubRet, error)
	// 用户发布
	Publish(ctx context.Context, in *PubMsg, opts ...grpc.CallOption) (*PubRet, error)
}

type rpcClient struct {
	cc *grpc.ClientConn
}

func NewRpcClient(cc *grpc.ClientConn) RpcClient {
	return &rpcClient{cc}
}

func (c *rpcClient) Login(ctx context.Context, in *LoginMsg, opts ...grpc.CallOption) (*LoginRet, error) {
	out := new(LoginRet)
	err := grpc.Invoke(ctx, "/proto.Rpc/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) Logout(ctx context.Context, in *LogoutMsg, opts ...grpc.CallOption) (*LogoutRet, error) {
	out := new(LogoutRet)
	err := grpc.Invoke(ctx, "/proto.Rpc/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) Subscribe(ctx context.Context, in *SubMsg, opts ...grpc.CallOption) (*SubRet, error) {
	out := new(SubRet)
	err := grpc.Invoke(ctx, "/proto.Rpc/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) UnSubscribe(ctx context.Context, in *UnSubMsg, opts ...grpc.CallOption) (*UnSubRet, error) {
	out := new(UnSubRet)
	err := grpc.Invoke(ctx, "/proto.Rpc/UnSubscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) Publish(ctx context.Context, in *PubMsg, opts ...grpc.CallOption) (*PubRet, error) {
	out := new(PubRet)
	err := grpc.Invoke(ctx, "/proto.Rpc/Publish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rpc service

type RpcServer interface {
	// 用户登陆相关接口
	Login(context.Context, *LoginMsg) (*LoginRet, error)
	Logout(context.Context, *LogoutMsg) (*LogoutRet, error)
	// 用户订阅相关
	Subscribe(context.Context, *SubMsg) (*SubRet, error)
	UnSubscribe(context.Context, *UnSubMsg) (*UnSubRet, error)
	// 用户发布
	Publish(context.Context, *PubMsg) (*PubRet, error)
}

func RegisterRpcServer(s *grpc.Server, srv RpcServer) {
	s.RegisterService(&_Rpc_serviceDesc, srv)
}

func _Rpc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rpc/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Login(ctx, req.(*LoginMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rpc/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Logout(ctx, req.(*LogoutMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rpc/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Subscribe(ctx, req.(*SubMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_UnSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSubMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).UnSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rpc/UnSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).UnSubscribe(ctx, req.(*UnSubMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rpc/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Publish(ctx, req.(*PubMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Rpc",
	HandlerType: (*RpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Rpc_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Rpc_Logout_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _Rpc_Subscribe_Handler,
		},
		{
			MethodName: "UnSubscribe",
			Handler:    _Rpc_UnSubscribe_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _Rpc_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x55, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xfe, 0xb9, 0xce, 0x1f, 0x67, 0x9a, 0x1f, 0x54, 0x7b, 0xb2, 0x42, 0x0e, 0xc8, 0xa0, 0x52,
	0x54, 0x29, 0x82, 0x72, 0xe6, 0x00, 0x1c, 0x22, 0xa1, 0x50, 0x45, 0xb6, 0x78, 0x80, 0xd8, 0xa4,
	0x89, 0x8b, 0xe3, 0x58, 0xde, 0xdd, 0x3b, 0x8f, 0xc4, 0x81, 0xd7, 0xe2, 0x1d, 0x98, 0x9d, 0xdd,
	0x69, 0x71, 0x5b, 0xcb, 0x22, 0xe2, 0xc0, 0xa9, 0xf3, 0xf7, 0x9b, 0xef, 0xab, 0x67, 0x27, 0x30,
	0xaa, 0xab, 0x6c, 0x56, 0xd5, 0x7b, 0xb5, 0x17, 0x7d, 0xfa, 0x13, 0x2d, 0x60, 0xb0, 0xd4, 0xe9,
	0x27, 0xb9, 0x11, 0x8f, 0xe0, 0x68, 0x55, 0x86, 0xde, 0x53, 0xef, 0x6c, 0x1c, 0xa3, 0x65, 0x7c,
	0x5d, 0x86, 0x47, 0xd6, 0xd7, 0xa5, 0x38, 0x01, 0x3f, 0xcb, 0xbf, 0x84, 0x3e, 0x06, 0xfc, 0xd8,
	0x98, 0x26, 0xb2, 0x93, 0x9b, 0xb0, 0x47, 0x25, 0xc6, 0x8c, 0x9e, 0x13, 0x5a, 0xbc, 0x56, 0x62,
	0x0c, 0x5e, 0x4d, 0x60, 0x41, 0xec, 0xd5, 0xc6, 0xdb, 0x39, 0x28, 0x6f, 0x17, 0x7d, 0xf3, 0x20,
	0x78, 0xbf, 0xd4, 0x72, 0xeb, 0xc6, 0x2a, 0xc9, 0x63, 0x95, 0x34, 0x7e, 0xad, 0xa8, 0xd6, 0x8f,
	0xd1, 0x32, 0x43, 0x94, 0x2a, 0x78, 0x2c, 0x9a, 0x34, 0x16, 0x89, 0xf0, 0x58, 0x24, 0x82, 0x3d,
	0x45, 0x1a, 0x06, 0x16, 0xa3, 0x48, 0x8d, 0x9f, 0x5f, 0x87, 0x23, 0xeb, 0xe7, 0xd7, 0x4c, 0x74,
	0x78, 0x4b, 0xf4, 0x15, 0x8c, 0x98, 0x81, 0x14, 0xcf, 0xa0, 0x87, 0x31, 0x43, 0xc2, 0x3f, 0x3b,
	0xbe, 0x78, 0x6c, 0xff, 0x41, 0x33, 0xce, 0xc7, 0x94, 0x8c, 0x7e, 0x20, 0xe9, 0x84, 0x49, 0x13,
	0x29, 0xdb, 0x30, 0x36, 0xa4, 0x24, 0x45, 0xb4, 0x44, 0xde, 0x36, 0xa2, 0x49, 0xc8, 0x95, 0x22,
	0xde, 0x48, 0xe2, 0x4a, 0x91, 0xaf, 0x1d, 0x6b, 0xb4, 0x9c, 0xd0, 0xfe, 0x5d, 0xa1, 0x83, 0x7b,
	0x42, 0x87, 0x7f, 0x2c, 0x14, 0x1a, 0x42, 0x93, 0x0e, 0xa1, 0x49, 0x53, 0xe8, 0x77, 0x14, 0xba,
	0xfc, 0xb0, 0x5d, 0x29, 0xfe, 0x3a, 0xea, 0xe6, 0xeb, 0x90, 0x08, 0xa5, 0x79, 0x29, 0x94, 0xfe,
	0x77, 0x44, 0x32, 0xe3, 0x36, 0x91, 0x9c, 0x77, 0x22, 0xa7, 0x10, 0xcc, 0x59, 0xa3, 0xc3, 0xf3,
	0x1a, 0x78, 0xf3, 0x0e, 0xbc, 0x79, 0x13, 0xef, 0x12, 0x82, 0xc5, 0x7e, 0x93, 0x97, 0x07, 0x3f,
	0xa4, 0x4d, 0x5e, 0xf1, 0x46, 0xa3, 0x19, 0x9d, 0x3a, 0xbc, 0xae, 0xa7, 0xf4, 0x16, 0x46, 0x58,
	0xb7, 0xd7, 0xea, 0xa0, 0xc1, 0xd1, 0x0b, 0x6e, 0xef, 0x9a, 0xf3, 0x11, 0x06, 0xc9, 0xa1, 0x67,
	0xc2, 0xbe, 0xf0, 0x1e, 0xbd, 0x0c, 0xb4, 0xcc, 0x91, 0x48, 0xba, 0x8f, 0xc4, 0x02, 0x82, 0xcf,
	0xe5, 0x5f, 0x9b, 0x79, 0xea, 0xd0, 0xba, 0xa6, 0x4e, 0xdd, 0x65, 0x32, 0x75, 0xf7, 0xf7, 0x62,
	0xea, 0x4e, 0x40, 0x6b, 0x96, 0xb6, 0xac, 0x35, 0x3b, 0x6f, 0xcf, 0x3e, 0x81, 0xe1, 0x65, 0x9e,
	0x7d, 0x7d, 0x78, 0x1d, 0x5d, 0xb2, 0xb5, 0xf3, 0x5d, 0x55, 0xca, 0xd6, 0x4e, 0x93, 0x6c, 0x65,
	0xb4, 0x58, 0xa5, 0xeb, 0xa2, 0xd1, 0xea, 0xdf, 0xcd, 0x3e, 0xd8, 0x7b, 0xf1, 0xd3, 0x03, 0x3f,
	0xae, 0x32, 0x71, 0x0e, 0x7d, 0xda, 0x53, 0xc1, 0xef, 0x82, 0x5f, 0xc1, 0xa4, 0x11, 0x40, 0x90,
	0xe8, 0x3f, 0x31, 0x83, 0x81, 0xdd, 0x36, 0x71, 0x72, 0x9b, 0xb4, 0xbb, 0x3b, 0x69, 0x46, 0x6c,
	0xfd, 0x39, 0xde, 0x2e, 0x9d, 0xca, 0xac, 0xce, 0xd3, 0xb5, 0xf8, 0x9f, 0xaf, 0x15, 0xad, 0xc4,
	0xe4, 0x37, 0xd7, 0x16, 0xbf, 0x86, 0x63, 0xfa, 0xc2, 0xae, 0x9c, 0xc7, 0xf3, 0x0e, 0x4d, 0x1a,
	0x01, 0xdb, 0xf2, 0x12, 0x86, 0xf8, 0x6b, 0x55, 0xe4, 0x72, 0x7b, 0x83, 0xbe, 0x6c, 0xa2, 0x2f,
	0x5d, 0x69, 0x3a, 0x20, 0xff, 0xcd, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x6f, 0x1f, 0xca,
	0x41, 0x07, 0x00, 0x00,
}
