// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	BPushMsg
	BPushMsgs
	SPushMsg
	SPushMsgs
	PChatMsg
	PChatMsgs
	GChatMsg
	GChatMsgs
	LoginMsg
	LogoutMsg
	SubMsg
	UnSubMsg
	RetBPushMsg
	RetSPushMsg
	RetPChatMsg
	RetGChatMsg
	RetLoginMsg
	RetLogoutMsg
	RetSubMsg
	RetUnSubMsg
	NickMsg
	RetNickMsg
	ApnsMsg
	RetApnsMsg
	LabelMsg
	RetLabelMsg
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// 广播
type BPushMsg struct {
	Ts  []byte `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Rt  int64  `protobuf:"varint,2,opt,name=rt" json:"rt,omitempty"`
	Ttl int64  `protobuf:"varint,3,opt,name=ttl" json:"ttl,omitempty"`
	Mid []byte `protobuf:"bytes,4,opt,name=mid,proto3" json:"mid,omitempty"`
	Lb  []byte `protobuf:"bytes,8,opt,name=lb,proto3" json:"lb,omitempty"`
	Ij  []byte `protobuf:"bytes,9,opt,name=ij,proto3" json:"ij,omitempty"`
	Msg []byte `protobuf:"bytes,7,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *BPushMsg) Reset()                    { *m = BPushMsg{} }
func (m *BPushMsg) String() string            { return proto1.CompactTextString(m) }
func (*BPushMsg) ProtoMessage()               {}
func (*BPushMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 广播打包结构
type BPushMsgs struct {
	Msgs []*BPushMsg `protobuf:"bytes,1,rep,name=msgs" json:"msgs,omitempty"`
}

func (m *BPushMsgs) Reset()                    { *m = BPushMsgs{} }
func (m *BPushMsgs) String() string            { return proto1.CompactTextString(m) }
func (*BPushMsgs) ProtoMessage()               {}
func (*BPushMsgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BPushMsgs) GetMsgs() []*BPushMsg {
	if m != nil {
		return m.Msgs
	}
	return nil
}

// 单播
type SPushMsg struct {
	Tts [][]byte `protobuf:"bytes,1,rep,name=tts,proto3" json:"tts,omitempty"`
	Tus [][]byte `protobuf:"bytes,2,rep,name=tus,proto3" json:"tus,omitempty"`
	Ft  []byte   `protobuf:"bytes,3,opt,name=ft,proto3" json:"ft,omitempty"`
	Fu  []byte   `protobuf:"bytes,4,opt,name=fu,proto3" json:"fu,omitempty"`
	Rt  int64    `protobuf:"varint,5,opt,name=rt" json:"rt,omitempty"`
	Ttl int64    `protobuf:"varint,6,opt,name=ttl" json:"ttl,omitempty"`
	Mid []byte   `protobuf:"bytes,7,opt,name=mid,proto3" json:"mid,omitempty"`
	Lb  []byte   `protobuf:"bytes,8,opt,name=lb,proto3" json:"lb,omitempty"`
	Ij  []byte   `protobuf:"bytes,9,opt,name=ij,proto3" json:"ij,omitempty"`
	Msg []byte   `protobuf:"bytes,10,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *SPushMsg) Reset()                    { *m = SPushMsg{} }
func (m *SPushMsg) String() string            { return proto1.CompactTextString(m) }
func (*SPushMsg) ProtoMessage()               {}
func (*SPushMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// 单播打包结构
type SPushMsgs struct {
	Msgs []*SPushMsg `protobuf:"bytes,1,rep,name=msgs" json:"msgs,omitempty"`
}

func (m *SPushMsgs) Reset()                    { *m = SPushMsgs{} }
func (m *SPushMsgs) String() string            { return proto1.CompactTextString(m) }
func (*SPushMsgs) ProtoMessage()               {}
func (*SPushMsgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SPushMsgs) GetMsgs() []*SPushMsg {
	if m != nil {
		return m.Msgs
	}
	return nil
}

// 私聊
type PChatMsg struct {
	Tt  []byte `protobuf:"bytes,1,opt,name=tt,proto3" json:"tt,omitempty"`
	Tu  []byte `protobuf:"bytes,2,opt,name=tu,proto3" json:"tu,omitempty"`
	Ft  []byte `protobuf:"bytes,3,opt,name=ft,proto3" json:"ft,omitempty"`
	Fu  []byte `protobuf:"bytes,4,opt,name=fu,proto3" json:"fu,omitempty"`
	Rt  int64  `protobuf:"varint,5,opt,name=rt" json:"rt,omitempty"`
	Ttl int64  `protobuf:"varint,6,opt,name=ttl" json:"ttl,omitempty"`
	Mid []byte `protobuf:"bytes,7,opt,name=mid,proto3" json:"mid,omitempty"`
	Lb  []byte `protobuf:"bytes,8,opt,name=lb,proto3" json:"lb,omitempty"`
	Ij  []byte `protobuf:"bytes,9,opt,name=ij,proto3" json:"ij,omitempty"`
	Msg []byte `protobuf:"bytes,10,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *PChatMsg) Reset()                    { *m = PChatMsg{} }
func (m *PChatMsg) String() string            { return proto1.CompactTextString(m) }
func (*PChatMsg) ProtoMessage()               {}
func (*PChatMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// 私聊打包结构
type PChatMsgs struct {
	Msgs []*PChatMsg `protobuf:"bytes,1,rep,name=msgs" json:"msgs,omitempty"`
}

func (m *PChatMsgs) Reset()                    { *m = PChatMsgs{} }
func (m *PChatMsgs) String() string            { return proto1.CompactTextString(m) }
func (*PChatMsgs) ProtoMessage()               {}
func (*PChatMsgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PChatMsgs) GetMsgs() []*PChatMsg {
	if m != nil {
		return m.Msgs
	}
	return nil
}

// 群聊
type GChatMsg struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *GChatMsg) Reset()                    { *m = GChatMsg{} }
func (m *GChatMsg) String() string            { return proto1.CompactTextString(m) }
func (*GChatMsg) ProtoMessage()               {}
func (*GChatMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// 群聊打包结构
type GChatMsgs struct {
	Msgs []*GChatMsg `protobuf:"bytes,1,rep,name=msgs" json:"msgs,omitempty"`
}

func (m *GChatMsgs) Reset()                    { *m = GChatMsgs{} }
func (m *GChatMsgs) String() string            { return proto1.CompactTextString(m) }
func (*GChatMsgs) ProtoMessage()               {}
func (*GChatMsgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GChatMsgs) GetMsgs() []*GChatMsg {
	if m != nil {
		return m.Msgs
	}
	return nil
}

// 登陆消息
type LoginMsg struct {
	An  []byte `protobuf:"bytes,1,opt,name=an,proto3" json:"an,omitempty"`
	Un  []byte `protobuf:"bytes,2,opt,name=un,proto3" json:"un,omitempty"`
	Cid int64  `protobuf:"varint,3,opt,name=cid" json:"cid,omitempty"`
	Gip []byte `protobuf:"bytes,4,opt,name=gip,proto3" json:"gip,omitempty"`
}

func (m *LoginMsg) Reset()                    { *m = LoginMsg{} }
func (m *LoginMsg) String() string            { return proto1.CompactTextString(m) }
func (*LoginMsg) ProtoMessage()               {}
func (*LoginMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// 登出消息
type LogoutMsg struct {
	An []byte `protobuf:"bytes,1,opt,name=an,proto3" json:"an,omitempty"`
	Un []byte `protobuf:"bytes,2,opt,name=un,proto3" json:"un,omitempty"`
}

func (m *LogoutMsg) Reset()                    { *m = LogoutMsg{} }
func (m *LogoutMsg) String() string            { return proto1.CompactTextString(m) }
func (*LogoutMsg) ProtoMessage()               {}
func (*LogoutMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// 订阅主题消息
type SubMsg struct {
	Ts []byte `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (m *SubMsg) Reset()                    { *m = SubMsg{} }
func (m *SubMsg) String() string            { return proto1.CompactTextString(m) }
func (*SubMsg) ProtoMessage()               {}
func (*SubMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

// 取消订阅主题消息
type UnSubMsg struct {
	Ts []byte `protobuf:"bytes,1,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (m *UnSubMsg) Reset()                    { *m = UnSubMsg{} }
func (m *UnSubMsg) String() string            { return proto1.CompactTextString(m) }
func (*UnSubMsg) ProtoMessage()               {}
func (*UnSubMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

// 广播返回消息
type RetBPushMsg struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RetBPushMsg) Reset()                    { *m = RetBPushMsg{} }
func (m *RetBPushMsg) String() string            { return proto1.CompactTextString(m) }
func (*RetBPushMsg) ProtoMessage()               {}
func (*RetBPushMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

// 单播返回消息
type RetSPushMsg struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RetSPushMsg) Reset()                    { *m = RetSPushMsg{} }
func (m *RetSPushMsg) String() string            { return proto1.CompactTextString(m) }
func (*RetSPushMsg) ProtoMessage()               {}
func (*RetSPushMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// 私聊返回消息
type RetPChatMsg struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RetPChatMsg) Reset()                    { *m = RetPChatMsg{} }
func (m *RetPChatMsg) String() string            { return proto1.CompactTextString(m) }
func (*RetPChatMsg) ProtoMessage()               {}
func (*RetPChatMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

// 群播返回消息
type RetGChatMsg struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RetGChatMsg) Reset()                    { *m = RetGChatMsg{} }
func (m *RetGChatMsg) String() string            { return proto1.CompactTextString(m) }
func (*RetGChatMsg) ProtoMessage()               {}
func (*RetGChatMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

// 登陆消息返回消息
type RetLoginMsg struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RetLoginMsg) Reset()                    { *m = RetLoginMsg{} }
func (m *RetLoginMsg) String() string            { return proto1.CompactTextString(m) }
func (*RetLoginMsg) ProtoMessage()               {}
func (*RetLoginMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

// 登出消息返回消息
type RetLogoutMsg struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RetLogoutMsg) Reset()                    { *m = RetLogoutMsg{} }
func (m *RetLogoutMsg) String() string            { return proto1.CompactTextString(m) }
func (*RetLogoutMsg) ProtoMessage()               {}
func (*RetLogoutMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

// 订阅主题消息返回消息
type RetSubMsg struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RetSubMsg) Reset()                    { *m = RetSubMsg{} }
func (m *RetSubMsg) String() string            { return proto1.CompactTextString(m) }
func (*RetSubMsg) ProtoMessage()               {}
func (*RetSubMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

// 取消订阅主题消息返回消息
type RetUnSubMsg struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RetUnSubMsg) Reset()                    { *m = RetUnSubMsg{} }
func (m *RetUnSubMsg) String() string            { return proto1.CompactTextString(m) }
func (*RetUnSubMsg) ProtoMessage()               {}
func (*RetUnSubMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

// 设置Nick
type NickMsg struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *NickMsg) Reset()                    { *m = NickMsg{} }
func (m *NickMsg) String() string            { return proto1.CompactTextString(m) }
func (*NickMsg) ProtoMessage()               {}
func (*NickMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

// 设置Nick返回消息
type RetNickMsg struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RetNickMsg) Reset()                    { *m = RetNickMsg{} }
func (m *RetNickMsg) String() string            { return proto1.CompactTextString(m) }
func (*RetNickMsg) ProtoMessage()               {}
func (*RetNickMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

// 设置Apns
type ApnsMsg struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *ApnsMsg) Reset()                    { *m = ApnsMsg{} }
func (m *ApnsMsg) String() string            { return proto1.CompactTextString(m) }
func (*ApnsMsg) ProtoMessage()               {}
func (*ApnsMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

// 设置Apns返回消息
type RetApnsMsg struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RetApnsMsg) Reset()                    { *m = RetApnsMsg{} }
func (m *RetApnsMsg) String() string            { return proto1.CompactTextString(m) }
func (*RetApnsMsg) ProtoMessage()               {}
func (*RetApnsMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

// Label
type LabelMsg struct {
	Msg [][]byte `protobuf:"bytes,1,rep,name=msg,proto3" json:"msg,omitempty"`
}

func (m *LabelMsg) Reset()                    { *m = LabelMsg{} }
func (m *LabelMsg) String() string            { return proto1.CompactTextString(m) }
func (*LabelMsg) ProtoMessage()               {}
func (*LabelMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

// 设置Label返回消息
type RetLabelMsg struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RetLabelMsg) Reset()                    { *m = RetLabelMsg{} }
func (m *RetLabelMsg) String() string            { return proto1.CompactTextString(m) }
func (*RetLabelMsg) ProtoMessage()               {}
func (*RetLabelMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func init() {
	proto1.RegisterType((*BPushMsg)(nil), "proto.BPushMsg")
	proto1.RegisterType((*BPushMsgs)(nil), "proto.BPushMsgs")
	proto1.RegisterType((*SPushMsg)(nil), "proto.SPushMsg")
	proto1.RegisterType((*SPushMsgs)(nil), "proto.SPushMsgs")
	proto1.RegisterType((*PChatMsg)(nil), "proto.PChatMsg")
	proto1.RegisterType((*PChatMsgs)(nil), "proto.PChatMsgs")
	proto1.RegisterType((*GChatMsg)(nil), "proto.GChatMsg")
	proto1.RegisterType((*GChatMsgs)(nil), "proto.GChatMsgs")
	proto1.RegisterType((*LoginMsg)(nil), "proto.LoginMsg")
	proto1.RegisterType((*LogoutMsg)(nil), "proto.LogoutMsg")
	proto1.RegisterType((*SubMsg)(nil), "proto.SubMsg")
	proto1.RegisterType((*UnSubMsg)(nil), "proto.UnSubMsg")
	proto1.RegisterType((*RetBPushMsg)(nil), "proto.RetBPushMsg")
	proto1.RegisterType((*RetSPushMsg)(nil), "proto.RetSPushMsg")
	proto1.RegisterType((*RetPChatMsg)(nil), "proto.RetPChatMsg")
	proto1.RegisterType((*RetGChatMsg)(nil), "proto.RetGChatMsg")
	proto1.RegisterType((*RetLoginMsg)(nil), "proto.RetLoginMsg")
	proto1.RegisterType((*RetLogoutMsg)(nil), "proto.RetLogoutMsg")
	proto1.RegisterType((*RetSubMsg)(nil), "proto.RetSubMsg")
	proto1.RegisterType((*RetUnSubMsg)(nil), "proto.RetUnSubMsg")
	proto1.RegisterType((*NickMsg)(nil), "proto.NickMsg")
	proto1.RegisterType((*RetNickMsg)(nil), "proto.RetNickMsg")
	proto1.RegisterType((*ApnsMsg)(nil), "proto.ApnsMsg")
	proto1.RegisterType((*RetApnsMsg)(nil), "proto.RetApnsMsg")
	proto1.RegisterType((*LabelMsg)(nil), "proto.LabelMsg")
	proto1.RegisterType((*RetLabelMsg)(nil), "proto.RetLabelMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Rpc service

type RpcClient interface {
	// 推送接口
	BPush(ctx context.Context, in *BPushMsg, opts ...grpc.CallOption) (*RetBPushMsg, error)
	SPush(ctx context.Context, in *SPushMsg, opts ...grpc.CallOption) (*RetSPushMsg, error)
	PChat(ctx context.Context, in *PChatMsg, opts ...grpc.CallOption) (*RetPChatMsg, error)
	GChat(ctx context.Context, in *GChatMsg, opts ...grpc.CallOption) (*RetGChatMsg, error)
	// 用户登陆相关接口
	Login(ctx context.Context, in *LoginMsg, opts ...grpc.CallOption) (*RetLoginMsg, error)
	Logout(ctx context.Context, in *LogoutMsg, opts ...grpc.CallOption) (*RetLogoutMsg, error)
	// 用户设置相关接口
	SetNick(ctx context.Context, in *NickMsg, opts ...grpc.CallOption) (*RetNickMsg, error)
	SetApns(ctx context.Context, in *ApnsMsg, opts ...grpc.CallOption) (*RetApnsMsg, error)
	SetLabel(ctx context.Context, in *LabelMsg, opts ...grpc.CallOption) (*RetLabelMsg, error)
	// 用户订阅相关
	Subscribe(ctx context.Context, in *SubMsg, opts ...grpc.CallOption) (*RetSubMsg, error)
	UnSubscribe(ctx context.Context, in *UnSubMsg, opts ...grpc.CallOption) (*RetUnSubMsg, error)
}

type rpcClient struct {
	cc *grpc.ClientConn
}

func NewRpcClient(cc *grpc.ClientConn) RpcClient {
	return &rpcClient{cc}
}

func (c *rpcClient) BPush(ctx context.Context, in *BPushMsg, opts ...grpc.CallOption) (*RetBPushMsg, error) {
	out := new(RetBPushMsg)
	err := grpc.Invoke(ctx, "/proto.Rpc/BPush", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) SPush(ctx context.Context, in *SPushMsg, opts ...grpc.CallOption) (*RetSPushMsg, error) {
	out := new(RetSPushMsg)
	err := grpc.Invoke(ctx, "/proto.Rpc/SPush", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) PChat(ctx context.Context, in *PChatMsg, opts ...grpc.CallOption) (*RetPChatMsg, error) {
	out := new(RetPChatMsg)
	err := grpc.Invoke(ctx, "/proto.Rpc/PChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) GChat(ctx context.Context, in *GChatMsg, opts ...grpc.CallOption) (*RetGChatMsg, error) {
	out := new(RetGChatMsg)
	err := grpc.Invoke(ctx, "/proto.Rpc/GChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) Login(ctx context.Context, in *LoginMsg, opts ...grpc.CallOption) (*RetLoginMsg, error) {
	out := new(RetLoginMsg)
	err := grpc.Invoke(ctx, "/proto.Rpc/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) Logout(ctx context.Context, in *LogoutMsg, opts ...grpc.CallOption) (*RetLogoutMsg, error) {
	out := new(RetLogoutMsg)
	err := grpc.Invoke(ctx, "/proto.Rpc/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) SetNick(ctx context.Context, in *NickMsg, opts ...grpc.CallOption) (*RetNickMsg, error) {
	out := new(RetNickMsg)
	err := grpc.Invoke(ctx, "/proto.Rpc/SetNick", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) SetApns(ctx context.Context, in *ApnsMsg, opts ...grpc.CallOption) (*RetApnsMsg, error) {
	out := new(RetApnsMsg)
	err := grpc.Invoke(ctx, "/proto.Rpc/SetApns", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) SetLabel(ctx context.Context, in *LabelMsg, opts ...grpc.CallOption) (*RetLabelMsg, error) {
	out := new(RetLabelMsg)
	err := grpc.Invoke(ctx, "/proto.Rpc/SetLabel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) Subscribe(ctx context.Context, in *SubMsg, opts ...grpc.CallOption) (*RetSubMsg, error) {
	out := new(RetSubMsg)
	err := grpc.Invoke(ctx, "/proto.Rpc/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) UnSubscribe(ctx context.Context, in *UnSubMsg, opts ...grpc.CallOption) (*RetUnSubMsg, error) {
	out := new(RetUnSubMsg)
	err := grpc.Invoke(ctx, "/proto.Rpc/UnSubscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rpc service

type RpcServer interface {
	// 推送接口
	BPush(context.Context, *BPushMsg) (*RetBPushMsg, error)
	SPush(context.Context, *SPushMsg) (*RetSPushMsg, error)
	PChat(context.Context, *PChatMsg) (*RetPChatMsg, error)
	GChat(context.Context, *GChatMsg) (*RetGChatMsg, error)
	// 用户登陆相关接口
	Login(context.Context, *LoginMsg) (*RetLoginMsg, error)
	Logout(context.Context, *LogoutMsg) (*RetLogoutMsg, error)
	// 用户设置相关接口
	SetNick(context.Context, *NickMsg) (*RetNickMsg, error)
	SetApns(context.Context, *ApnsMsg) (*RetApnsMsg, error)
	SetLabel(context.Context, *LabelMsg) (*RetLabelMsg, error)
	// 用户订阅相关
	Subscribe(context.Context, *SubMsg) (*RetSubMsg, error)
	UnSubscribe(context.Context, *UnSubMsg) (*RetUnSubMsg, error)
}

func RegisterRpcServer(s *grpc.Server, srv RpcServer) {
	s.RegisterService(&_Rpc_serviceDesc, srv)
}

func _Rpc_BPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BPushMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).BPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rpc/BPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).BPush(ctx, req.(*BPushMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_SPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SPushMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).SPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rpc/SPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).SPush(ctx, req.(*SPushMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_PChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PChatMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).PChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rpc/PChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).PChat(ctx, req.(*PChatMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_GChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GChatMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).GChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rpc/GChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).GChat(ctx, req.(*GChatMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rpc/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Login(ctx, req.(*LoginMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rpc/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Logout(ctx, req.(*LogoutMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_SetNick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NickMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).SetNick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rpc/SetNick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).SetNick(ctx, req.(*NickMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_SetApns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApnsMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).SetApns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rpc/SetApns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).SetApns(ctx, req.(*ApnsMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_SetLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).SetLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rpc/SetLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).SetLabel(ctx, req.(*LabelMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rpc/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Subscribe(ctx, req.(*SubMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_UnSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSubMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).UnSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Rpc/UnSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).UnSubscribe(ctx, req.(*UnSubMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Rpc",
	HandlerType: (*RpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BPush",
			Handler:    _Rpc_BPush_Handler,
		},
		{
			MethodName: "SPush",
			Handler:    _Rpc_SPush_Handler,
		},
		{
			MethodName: "PChat",
			Handler:    _Rpc_PChat_Handler,
		},
		{
			MethodName: "GChat",
			Handler:    _Rpc_GChat_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Rpc_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Rpc_Logout_Handler,
		},
		{
			MethodName: "SetNick",
			Handler:    _Rpc_SetNick_Handler,
		},
		{
			MethodName: "SetApns",
			Handler:    _Rpc_SetApns_Handler,
		},
		{
			MethodName: "SetLabel",
			Handler:    _Rpc_SetLabel_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _Rpc_Subscribe_Handler,
		},
		{
			MethodName: "UnSubscribe",
			Handler:    _Rpc_UnSubscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 589 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x54, 0xcd, 0x72, 0xd3, 0x30,
	0x10, 0x6e, 0xea, 0xfc, 0xd8, 0x9b, 0x50, 0x82, 0xb8, 0x78, 0xc2, 0x5f, 0xc7, 0x5c, 0x3a, 0xc3,
	0x4c, 0x06, 0x0a, 0x2f, 0x40, 0x39, 0xf8, 0x52, 0x3a, 0x99, 0x68, 0x78, 0x80, 0xd8, 0xa4, 0xae,
	0x4b, 0x70, 0x3c, 0x91, 0x74, 0xe7, 0x55, 0x78, 0x03, 0x0e, 0x3c, 0x20, 0xd2, 0x4a, 0x72, 0x2c,
	0x3b, 0x26, 0x70, 0xeb, 0x29, 0xd2, 0xb7, 0xdf, 0xae, 0xf6, 0xdb, 0x6f, 0x1d, 0x08, 0x76, 0x65,
	0x3a, 0x2f, 0x77, 0x5b, 0xbe, 0x25, 0x03, 0xfc, 0x89, 0x7e, 0xf4, 0xc0, 0xbf, 0x5a, 0x08, 0x76,
	0xf7, 0x99, 0x65, 0xe4, 0x0c, 0x4e, 0x39, 0x0b, 0x7b, 0xe7, 0xbd, 0x8b, 0xc9, 0x52, 0x9e, 0xd4,
	0x7d, 0xc7, 0xc3, 0x53, 0x79, 0xf7, 0x96, 0xf2, 0x44, 0xa6, 0xe0, 0x71, 0xbe, 0x09, 0x3d, 0x04,
	0xd4, 0x51, 0x21, 0xdf, 0xf3, 0xaf, 0x61, 0x1f, 0x53, 0xd4, 0x51, 0xe5, 0x6c, 0x92, 0xd0, 0xd7,
	0x35, 0x36, 0x89, 0xba, 0xe7, 0xf7, 0x61, 0xa0, 0xef, 0xf9, 0x3d, 0x66, 0xb0, 0x2c, 0x1c, 0x99,
	0x0c, 0x96, 0x45, 0x6f, 0x21, 0xb0, 0x1d, 0x30, 0xf2, 0x1a, 0xfa, 0x12, 0x53, 0x4d, 0x78, 0x17,
	0xe3, 0xcb, 0xc7, 0xba, 0xd9, 0xb9, 0x8d, 0x2f, 0x31, 0x18, 0xfd, 0x96, 0x4d, 0x53, 0xdb, 0x34,
	0x36, 0xa5, 0x13, 0x26, 0xaa, 0x29, 0x86, 0x88, 0x60, 0xb2, 0x6f, 0x8d, 0x08, 0x14, 0x72, 0xcb,
	0xb1, 0x6f, 0xd9, 0xc4, 0x2d, 0xc7, 0xbb, 0x30, 0x5d, 0xcb, 0x93, 0x11, 0x3a, 0x68, 0x0a, 0x1d,
	0xb6, 0x84, 0x8e, 0xfe, 0x5b, 0x28, 0x38, 0x42, 0xe9, 0x11, 0xa1, 0xd4, 0x15, 0xfa, 0x4b, 0x0a,
	0x5d, 0x7c, 0xba, 0x5b, 0x71, 0xeb, 0x0e, 0xaf, 0xdc, 0x41, 0x11, 0x5c, 0xa0, 0x3b, 0xea, 0x2e,
	0x1e, 0x8e, 0x48, 0xdb, 0x71, 0x97, 0x48, 0x1b, 0x37, 0x22, 0x9f, 0x83, 0x1f, 0x5b, 0x8d, 0xa6,
	0x5e, 0xcf, 0xa9, 0x17, 0x1f, 0xa9, 0x17, 0xbb, 0xf5, 0x6e, 0xc0, 0xbf, 0xde, 0x66, 0x79, 0x61,
	0x66, 0xb6, 0x2a, 0xec, 0xcc, 0x56, 0x85, 0xba, 0x8b, 0xc2, 0xce, 0x4c, 0x14, 0xea, 0xbd, 0x54,
	0x2a, 0x36, 0x1b, 0x2d, 0x8f, 0x0a, 0xc9, 0xf2, 0xd2, 0x6e, 0xb4, 0x3c, 0x46, 0x6f, 0x20, 0x90,
	0xf5, 0xb6, 0x82, 0xff, 0x43, 0xc1, 0x28, 0x84, 0x21, 0x15, 0xc9, 0x81, 0x8f, 0x29, 0x9a, 0x81,
	0xff, 0xa5, 0xe8, 0x88, 0xbd, 0x82, 0xf1, 0x72, 0xcd, 0xaf, 0x6a, 0x2b, 0xdd, 0x98, 0x82, 0x26,
	0xd0, 0x63, 0x84, 0x45, 0xf7, 0x1c, 0x35, 0x21, 0x3e, 0x46, 0xa8, 0x26, 0xd7, 0x26, 0x9c, 0xc3,
	0x44, 0x13, 0xcc, 0x28, 0xda, 0x8c, 0x17, 0x10, 0xa8, 0x2e, 0xb5, 0xc6, 0xae, 0x17, 0xaa, 0x21,
	0xb4, 0x09, 0xcf, 0x60, 0x74, 0x93, 0xa7, 0xdf, 0x0e, 0x07, 0x5f, 0x02, 0xc8, 0xec, 0xee, 0xb8,
	0x4c, 0xfe, 0x58, 0x16, 0xec, 0x6f, 0xc9, 0xdd, 0x71, 0xb9, 0x83, 0xd7, 0xab, 0x64, 0xbd, 0x71,
	0xa2, 0x5e, 0x63, 0x34, 0x2d, 0x82, 0x4d, 0xbf, 0xfc, 0xd9, 0x07, 0x6f, 0x59, 0xa6, 0x64, 0x0e,
	0x03, 0x34, 0x91, 0x34, 0xff, 0xb8, 0x66, 0xc4, 0x00, 0x35, 0x9b, 0xa3, 0x13, 0xc5, 0xa7, 0x0e,
	0x9f, 0x1e, 0xe0, 0x53, 0x87, 0x8f, 0x16, 0x93, 0xe6, 0xa7, 0x54, 0xe7, 0x5b, 0x4c, 0xf3, 0x63,
	0x87, 0x1f, 0x1f, 0xe0, 0xc7, 0x0e, 0x1f, 0x17, 0xa0, 0xe2, 0xdb, 0x75, 0xa8, 0xf3, 0x2d, 0x26,
	0xf9, 0xef, 0x60, 0xa8, 0xf7, 0x81, 0x4c, 0xf7, 0x09, 0x7a, 0x3d, 0x66, 0x4f, 0x9d, 0x0c, 0x0d,
	0xe2, 0x13, 0x23, 0xaa, 0x6d, 0x24, 0x67, 0x86, 0x61, 0x3c, 0x9d, 0x3d, 0xd9, 0x67, 0x18, 0xa8,
	0xe2, 0x2b, 0xe7, 0x2a, 0xbe, 0xb1, 0xb1, 0xce, 0x37, 0x10, 0xb6, 0xe4, 0x53, 0xe3, 0xd5, 0x5e,
	0x85, 0x71, 0xce, 0x51, 0x61, 0x30, 0x7c, 0x22, 0x90, 0x2b, 0xc9, 0xd2, 0x5d, 0x9e, 0xac, 0xc9,
	0x23, 0xeb, 0x04, 0x2e, 0xe9, 0x6c, 0x5a, 0xf3, 0x01, 0x11, 0xc9, 0xff, 0x00, 0x63, 0x5c, 0x62,
	0x93, 0x61, 0x5f, 0xb1, 0x8b, 0x5d, 0x7f, 0xc5, 0x62, 0xd1, 0x49, 0x32, 0x44, 0xf0, 0xfd, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xef, 0xb0, 0x65, 0x84, 0x07, 0x00, 0x00,
}
